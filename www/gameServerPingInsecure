<?php

// Game Server Ping
//
// This script is an API that game servers call periodically to check in
// with the IFDB dispatcher.  This lets a game server give us its current
// online/offline status and its available capacity.
//
// The request parameters are:
//
//   id=ID       - the server's ID
//   r=R         - R is a random string for hashing the API key; the
//                 game server should pick a different random value on
//                 each call to protect its API key during transmission
//   key=H       - H = SHA1(R . apikey) - this is an encrypted form
//                 of the API key, using the one-time-only random hash
//                 string to protect the key in transmission
//   online=Y|N  - the server is online/offline
//   capacity=C  - C is an integer indicating roughly how many open
//                 game slots we have available.  This indicates that the
//                 server is willing to accept C new concurrent game
//                 requests right now.
//
// Returns a plain text page containing a single line of text.  The first
// space-delimited token is a result code; this is "OK" on success, or
// an alphanumeric error code otherwise.  The rest of the line is a
// human-readable message describing the result.

include_once "session-start.php";
include_once "dbconnect.php";
include_once "util.php";

// connect to the storage server
$sdb = storageDbConnect();

// Get the request parameters.  'r' is a random number generated by the
// client to protect its API key: we hash 'r' and the API key to generate
// a one-time key to send with this request.  Both sides can produce the
// correct hash, but no one else can, because the API key is a shared
// secret.  't' is the time of the request, as a floating point value
// giving seconds past the Unix epoch - PHP microtime(true) returns the
// correct value for this.  This is to prevent replay attacks: by
// using it in the hash, we make the hash time-dependent.  We verify
// that the timestamp value is later than the last request from the same
// server, and we verify that the time is within a reasonable interval
// of the actual current time.
// 
$id = get_req_data("id");
$r = get_req_data("r");
$t = get_req_data("t");
$apikeyReq = get_req_data("key");
$online = get_req_data("online");
$capacity = get_req_data("capacity");

// query the server record
$qid = mysql_real_escape_string($id, $sdb);
$result = mysql_query(
    "select apikey, lastt
     from gameservers
     where gameserverid = '$qid'", $sdb);
if (mysql_num_rows($result) == 0)
    sendResult("NotFound Server ID not found");

// fetch the record
list($apikeyDb, $lastT) = mysql_fetch_row($result);
$lastT = floatval($lastT);

// make sure we have an R (random hash input) value
if ($r == "")
    sendResult("BadParams Missing parameter 'r'");

// Make sure we have a T (request timestamp) value, and that it's later
// than the last T for this server, and that it's reasonably close to
// the current time.  (Reasonably close takes into account that the client
// and server clocks aren't exactly synchronized, and that the request
// took some amount of time to traverse the network, get processed by
// the Web server, and reach this point in the execution of this script.)
$curT = microtime(true);
//if ($t == ""
//    || floatval($t) <= floatval($lastT)
//    || floatval($t) < $curT - 180
//    || floatval($t) > $curT + 90)
//    //$$$
//    sendResult("BadParams Missing or invalid parameter 't' (wanted $curT)");

// validate the API key
$apikeyHash = sha1("$r:$apikeyDb:$t");
//if ($apikeyHash != $apikeyReq)
//    sendResult("BadKey Incorrect API key (wanted $apikeyHash)"); //$$$

// looks good - make a list of updates
$updates = array();
$updates[] = "keepalive = now()";
$updates[] = "lastt = '" . mysql_real_escape_string($t, $sdb) . "'";
if ($online != "")
    $updates[] = "online = '" . ($online == 'Y' ? '1' : '0') . "'";
if ($capacity != "")
    $updates[] = "capacity = " . intval($capacity);

// apply the updates
$updates = implode(",", $updates);
$result = mysql_query(
    "update gameservers set $updates where gameserverid = '$qid'", $sdb);
if (!$result)
    sendResult("DBErr Error updating game server record in database");

// success!
sendResult("OK Success");

function sendResult($msg)
{
    header("Content-type: text/plain");
    echo $msg;
    exit;
}

?>